<launch>
    <arg name="gain_scheduling" default="false" doc="Whether to use gain scheduling, which changes PID values based on executed gait."/>
    <arg name="gait_selection" default="false" doc="Whether to use gait selection in ros1."/>
    <arg name="gain_tuning" default="groundgait" doc="The configuration to use for gain scheduling. Only used when 'gain_scheduling' is true."/>
    <arg name="sounds" default="false" doc="Whether to use sounds."/>

    <arg name="rviz" default="true" doc="Launches RViz."/>
    <arg name="rqt_input" default="false" doc="Launches the rqt input device."/>
    <arg name="gazebo_ui" default="false" doc="Launches the Gazebo UI."/>

    <arg name="balance" default="false" doc="Uses the dynamic balance gaits instead of the predefined gaits."/>
    <arg name="data_collector" default="false" doc="Launches the data collector when true."/>

    <arg name="ground_gait" default="$(arg balance)" doc="Exoskeleton will ground gait in gazebo_ui if true."/>
    <arg name="unpause" default="$(eval not gazebo_ui)" doc="Unpause simulation when controller starts."/>
    <arg name="fixed" default="$(eval not ground_gait)" doc="Fixes the exoskeleton in the world in rviz"/>
    <arg name="obstacle" default="none" doc="Obstacle to load in the simulation."/>

    <arg name="controller" default="effort_control" doc="Changes the controller used by simulation."/>

    <arg name="configuration" default="exoskeleton" doc="Configuration on launching the 'simulation' or 'exoskeleton'."/>
    <arg name="headless" default="false" doc="Launches no GUI when true."/>
    <arg name="hardware_interface" default="true" doc="Launches the hardware interface when config is 'exoskeleton."/>

    <arg name="arduino_master" default="false" doc="Launches ros serial node to connect with arduino on master."/>
    <arg name="input_device" default="false" doc="Launches ros serial node to connect with input device."/>
    <arg name="wireless" default="false" doc="Enables wireless connection to the input device."/>

    <arg name="gait_directory" default="training-v" doc="Gait files directory to use"/>

    <arg name="rosbag" default="true" doc="Enables rosbag record node."/>
    <arg name="bag_prefix" default="log" doc="Prefix of the bag file. Only used if rosbag is true."/>

    <arg name="pressure_soles" default="false" doc="Whether a connection with pressure_soles should be established." />
    <arg name="moticon_ip" default="192.168.8.105" doc="The ip-adress with Moticon software running on it, defaults to
            EMS switch laptop on standard router"/>


    <arg name="use_sim_time" default="true" doc="Uses simulated time and publishes on /clock."/>
    <arg name="fake_sensor_data" default="false" doc="Publishes fake sensor data."/>
    <arg name="debug" default="false" doc="Starts gazebo debugging with gdb."/>

    <arg name="robot" default="march4" doc="Robot to use."/>
    <arg name="robot_description" default="$(arg robot)" doc="URDF file to use"/>
    <arg name="controller_type" default="effort_control" doc="Changes the controller used by simulation."/>
    <arg name="controller_name" default="$(arg robot)" doc="Name of the controller"/>

    <param name="balance" value="$(arg balance)"/>

    <node
            if="$(arg rosbag)"
            pkg="rosbag"
            name="record"
            type="record"
            output="log"
            args="-a -q -o $(arg bag_prefix)"
    />

    <node name="rviz" pkg="rviz" type="rviz" if="$(eval not headless and rviz)"/>

    <group ns="march">
        <include file="$(find march_safety)/launch/march_safety.launch"/>

        <node name="sound_play" pkg="sound_play" type="soundplay_node.py" if="$(arg sounds)" output="screen"/>

        <include file="$(find march_gain_scheduling)/launch/march_gain_scheduling.launch" if="$(arg gain_scheduling)">
            <arg name="configuration" value="$(arg gain_tuning)"/>
        </include>

        <include file="$(find march_data_collector)/launch/march_data_collector.launch" if="$(eval data_collector or balance)">
            <arg name="pressure_soles" value="$(arg pressure_soles)"/>
            <arg name="moticon_ip" value="$(arg moticon_ip)"/>
        </include>

        <include if="$(arg balance)" file="$(find march_moveit)/launch/march_moveit.launch" />

        <include if="$(arg gait_selection)" file="$(find march_gait_selection)/launch/march_gait_selection.launch">
            <arg name="gait_directory" value="$(arg gait_directory)"/>
            <arg name="sounds" value="$(arg sounds)"/>
        </include>


        <include file="$(find march_parameter_server)/launch/march_parameter_server.launch" />
    </group>

    <!-- Load the URDF into the ROS Parameter Server -->
    <!-- Override effort values as Gazebo uses different units than the actual IMC. -->
    <!-- In theory, if the controller is properly tuned, these values can be arbitrarily large. -->
    <!-- However, to limit the safety controller, we need to limit them. -->
    <param name="robot_description"
           command="$(find xacro)/xacro '$(find march_description)/urdf/$(arg robot_description).xacro'
                    configuration:=$(arg configuration)
                    ground_gait:=$(arg ground_gait)" />

    <!-- Upload the controller configuration -->
    <rosparam file="$(find march_simulation)/config/$(arg controller_type)/$(arg controller_name).yaml" command="load"/>

    <group ns="march">
        <node name="controller_spawner" pkg="controller_manager" type="controller_manager"
              respawn="false" output="screen"
              args="spawn controller/trajectory joint_state_controller"/>
        <node name="upload_joint_names" pkg="march_simulation" type="upload_joint_names"/>
        <node name="world_transformer" pkg="march_simulation" type="to_world_transform" unless="$(arg fixed)"/>

        <!--<include file="$(find march_fake_sensor_data)/launch/march_fake_sensor_data.launch" if="$(arg fake_sensor_data)"/>-->
    </group>

    <group>
        <!-- We resume the logic in empty_world.launch_sm, changing only the name of the world to be launched -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find march_simulation)/worlds/march.world"/>
            <arg name="debug" value="$(arg debug)" />
            <arg name="gui" value="$(arg gazebo_ui)" />
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="verbose" value="true" />
        </include>

        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false"
          args="-urdf -model march -param robot_description"/>
    </group>

    <group if="$(eval obstacle != 'none')">
        <param name="model_description"
           command="$(find xacro)/xacro '$(find march_simulation)/obstacles/$(arg obstacle).xacro'" />

        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <node name="model_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false"
          args="-urdf -model $(arg obstacle) -param model_description"/>
    </group>

</launch>
