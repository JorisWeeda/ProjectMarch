stages:
  - Tag container
  - Build container
  - Lint code
  - Build code
  - Test code
  - Static analysis on code

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - ccache

image: registry.gitlab.com/project-march/march:$CI_COMMIT_BRANCH

# Allow each branch to run their own container. This allows a branch to add
# dependencies to their package.xml and use them as expected. This process works as
# follows:
# 1. The image for this branch is pulled. If it does not exist, copy the default
#   image and tag it as an image for this branch.
# 2. If there are changes to the Dockerfile or to a package.xml file, rebuild the
#   con tainer.
container:tag:
  stage: Tag container
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if ! docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH; then docker pull $CI_REGISTRY_IMAGE:$CI_DEFAULT_BRANCH && docker tag $CI_REGISTRY_IMAGE:$CI_DEFAULT_BRANCH $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH && docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH; fi;

container:build:
  stage: Build container
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_DEFAULT_BRANCH -t $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH
    - if [[ $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]; then docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH $CI_REGISTRY_IMAGE:latest && docker push $CI_REGISTRY_IMAGE:latest; fi;
  rules:
    # Ensure that the merge request type is not detached, not from a merged_result, and not a merge_train because
    # this means that $CI_COMMIT_BRANCH would be empty (See https://docs.gitlab.com/ee/ci/variables/predefined_variables.html)
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE !~ /detached|merged_result|merge_train/'
      changes:
        - Dockerfile
        - "**/package.xml"

# Runs a linter on the code to see if the code style is consistent and to avoid common
# mistakes
flake8:
  stage: Lint code
  script:
    - python3 -m flakehell lint --format=gitlab --output-file flakehell.json --baseline .flake-baseline
  only:
    changes:
      - "ros1/src/**/*.py"
      - "ros2/src/**/*.py"
  artifacts:
    reports:
      codequality: flakehell.json

noetic:build:
  stage: Build code
  artifacts:
    paths:
      - ros1/build/
      - ros1/install/
      - ros1/log/
  script:
    - cd ros1/
    - source /opt/ros/noetic/local_setup.bash && colcon build --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" --event-handlers console_direct+

foxy:build:
  stage: Build code
  artifacts:
    paths:
      - ros2/build/
      - ros2/install/
      - ros2/log/
  script:
    - cd ros2/
    - source /opt/ros/foxy/local_setup.bash && colcon build --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" --event-handlers console_direct+

noetic:test:
  stage: Test code
  dependencies:
    - noetic:build
  needs: ["noetic:build"]
  script:
    - cd ros1/
    - source /opt/ros/noetic/local_setup.bash && source install/local_setup.bash && colcon test --event-handlers console_direct+
    - colcon test-result --verbose

foxy:test:
  stage: Test code
  dependencies:
    - foxy:build
  needs: ["foxy:build"]
  script:
    - cd ros2/
    - source /opt/ros/foxy/local_setup.bash && source install/local_setup.bash && colcon test --event-handlers console_direct+
    - colcon test-result --verbose

noetic:clang_tidy:
  stage: Static analysis on code
  dependencies:
    - noetic:build
  needs: ["noetic:build"]
  script:
    - cd ros1/
    - find src -name '*.hpp' -or -name '*.h' -or -name '*.cpp' | xargs -L1 -P$(getconf _NPROCESSORS_ONLN) -I{} -- clang-tidy -p build {} 2> /dev/null
  only:
    changes:
      - "ros1/**/*.{hpp,h,cpp}"
  allow_failure: true

foxy:clang_tidy:
  stage: Static analysis on code
  dependencies:
    - foxy:build
  needs: ["foxy:build"]
  script:
    - cd ros2/
    - find src -name '*.hpp' -or -name '*.h' -or -name '*.cpp' | xargs -L1 -P$(getconf _NPROCESSORS_ONLN) -I{} -- clang-tidy -p build {} 2> /dev/null
  only:
    changes:
      - "ros2/**/*.{hpp,h,cpp}"
  allow_failure: true
